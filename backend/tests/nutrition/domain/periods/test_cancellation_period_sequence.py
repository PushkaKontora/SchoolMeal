import pytest

from app.nutrition.domain.periods import CancellationPeriodSequence
from tests.nutrition.domain.periods.utils import RowPeriod, create_cancellation, create_period, to_row_cancellation


@pytest.mark.parametrize(
    ["items", "expected"],
    [
        (permutation, expected)
        for items, expected in [
            [
                [(1, 3, {"a"})],
                [(1, 3, {"a"})],
            ],
            [
                [(1, 3, {"a"}), (5, 8, {"b"})],
                [(1, 3, {"a"}), (5, 8, {"b"})],
            ],
            [
                [(1, 6, {"a"}), (3, 8, {"b"})],
                [(1, 2, {"a"}), (3, 6, {"a", "b"}), (7, 8, {"b"})],
            ],
            [
                [(1, 6, {"a"}), (3, 8, {"a"})],
                [(1, 8, {"a"})],
            ],
            [
                [(1, 6, {"a"}), (3, 8, {})],
                [(1, 8, {"a"})],
            ],
            [
                [(1, 8, {"a"}), (3, 5, {"b"})],
                [(1, 2, {"a"}), (3, 5, {"a", "b"}), (6, 8, {"a"})],
            ],
            [
                [(1, 8, {"a"}), (3, 5, {"a"})],
                [(1, 8, {"a"})],
            ],
            [
                [(1, 8, {"a"}), (3, 5, {})],
                [(1, 8, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (1, 5, {"b"})],
                [(1, 5, {"a", "b"})],
            ],
            [
                [(1, 5, {"a"}), (1, 5, {"a"})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (1, 5, {})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (3, 3, {"b"})],
                [(1, 2, {"a"}), (3, 3, {"a", "b"}), (4, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (3, 3, {"a"})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (3, 3, {})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 1, {"a"}), (1, 5, {"b"})],
                [(1, 1, {"a", "b"}), (2, 5, {"b"})],
            ],
            [
                [(1, 1, {"a"}), (1, 5, {"a"})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 1, {"a"}), (1, 5, {})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (5, 5, {"b"})],
                [(1, 4, {"a"}), (5, 5, {"a", "b"})],
            ],
            [
                [(1, 5, {"a"}), (5, 5, {"a"})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (5, 5, {})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 1, {"a"}), (1, 1, {"b"})],
                [(1, 1, {"a", "b"})],
            ],
            [
                [(1, 1, {"a"}), (1, 1, {"a"})],
                [(1, 1, {"a"})],
            ],
            [
                [(1, 1, {"a"}), (1, 1, {})],
                [(1, 1, {"a"})],
            ],
            [
                [(1, 1, {"a"}), (2, 3, {"b"})],
                [(1, 1, {"a"}), (2, 3, {"b"})],
            ],
            [
                [(1, 1, {"a"}), (2, 3, {"a"})],
                [(1, 1, {"a"}), (2, 3, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (2, 4, {"b"}), (3, 3, {"c"})],
                [(1, 1, {"a"}), (2, 2, {"a", "b"}), (3, 3, {"a", "b", "c"}), (4, 4, {"a", "b"}), (5, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (2, 4, {"a"}), (3, 3, {"a"})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {}), (2, 4, {"a"}), (3, 3, {})],
                [(1, 5, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (5, 8, {"b"}), (8, 10, {"c"})],
                [(1, 4, {"a"}), (5, 5, {"a", "b"}), (6, 7, {"b"}), (8, 8, {"b", "c"}), (9, 10, {"c"})],
            ],
            [
                [(1, 5, {"a"}), (5, 8, {"a"}), (8, 10, {"a"})],
                [(1, 10, {"a"})],
            ],
            [
                [(1, 5, {}), (5, 8, {"a"}), (8, 10, {})],
                [(1, 10, {"a"})],
            ],
            [
                [(1, 5, {"a"}), (5, 8, {"a", "b"})],
                [(1, 4, {"a"}), (5, 8, {"a", "b"})],
            ],
            [
                [(1, 9, {"a"}), (5, 11, "b"), (5, 13, "c"), (9, 9, "d"), (9, 15, "e"), (9, 9, "f"), (11, 11, "g")],
                [
                    (1, 4, {"a"}),
                    (5, 8, {"b", "a", "c"}),
                    (9, 9, {"a", "d", "b", "e", "c", "f"}),
                    (10, 10, {"b", "e", "c"}),
                    (11, 11, {"b", "e", "c", "g"}),
                    (12, 13, {"e", "c"}),
                    (14, 15, {"e"}),
                ],
            ],
            [
                [
                    (1, 9, {"a"}),
                    (5, 11, {"a"}),
                    (5, 13, {"a"}),
                    (9, 9, {"a"}),
                    (9, 15, {"a"}),
                    (9, 9, {"a"}),
                    (11, 11, {"a"}),
                ],
                [(1, 15, {"a"})],
            ],
            [
                [(1, 9, {"a"}), (5, 11, {"b"}), (9, 15, {"b"}), (5, 13, {"b", "c"}), (9, 9, {})],
                [(1, 4, {"a"}), (5, 9, {"a", "b", "c"}), (10, 13, {"b", "c"}), (14, 15, {"b"})],
            ],
        ]
        for permutation in [items, list(reversed(items))]
    ],
)
def test_inserting_period_to_sequence(items: list[RowPeriod], expected: list[RowPeriod]):
    sequence = CancellationPeriodSequence()

    for start, end, reasons in items:
        sequence = sequence.insert(create_cancellation(start, end, reasons))

    assert [to_row_cancellation(period) for period in sequence] == expected


@pytest.mark.parametrize(
    ["items", "period", "expected"],
    [
        [
            [(3, 5, {"a"}), (10, 15, {"b"})],
            (2, 2),
            [(3, 5, {"a"}), (10, 15, {"b"})],
        ],
        [
            [(3, 5, {"a"}), (10, 15, {"b"})],
            (1, 2),
            [(3, 5, {"a"}), (10, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (8, 8),
            [(1, 5, {"a"}), (10, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (6, 9),
            [(1, 5, {"a"}), (10, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (16, 16),
            [(1, 5, {"a"}), (10, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (16, 20),
            [(1, 5, {"a"}), (10, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (5, 10),
            [(1, 4, {"a"}), (11, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (3, 14),
            [(1, 2, {"a"}), (15, 15, {"b"})],
        ],
        [
            [(1, 5, {"a"}), (10, 15, {"b"})],
            (1, 15),
            [],
        ],
        [
            [(2, 5, {"a"}), (10, 15, {"b"})],
            (1, 16),
            [],
        ],
    ],
)
def test_removing_period_from_sequence(items: list[RowPeriod], period: RowPeriod, expected: list[RowPeriod]):
    sequence = CancellationPeriodSequence()

    for start, end, reasons in items:
        sequence = sequence.insert(create_cancellation(start, end, reasons))

    sequence = sequence.remove(create_period(*period))
    assert list(map(to_row_cancellation, sequence)) == expected
