"""init

Revision ID: 0058839301b2
Revises:
Create Date: 2023-04-25 14:09:12.558020

"""
import sqlalchemy as sa

from alembic import op


# revision identifiers, used by Alembic.
revision = "0058839301b2"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "schools",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("schools_pkey")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("last_name", sa.String(length=32), nullable=False),
        sa.Column("first_name", sa.String(length=32), nullable=False),
        sa.Column("login", sa.String(length=32), nullable=False),
        sa.Column("role", sa.Enum("PARENT", "TEACHER", "EMPLOYEE", "ORGANIZER", name="role"), nullable=False),
        sa.Column("phone", sa.String(length=12), nullable=True),
        sa.Column("email", sa.String(length=32), nullable=True),
        sa.Column("photo_path", sa.String(length=128), nullable=True),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
        sa.UniqueConstraint("email", name=op.f("users_email_key")),
        sa.UniqueConstraint("login", name=op.f("users_login_key")),
        sa.UniqueConstraint("phone", name=op.f("users_phone_key")),
    )
    op.create_table(
        "foods",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("school_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("photo_path", sa.String(length=128), nullable=False),
        sa.Column("components", sa.String(length=256), nullable=False),
        sa.Column("weight", sa.Float(precision=2), nullable=True),
        sa.Column("kcal", sa.Float(precision=2), nullable=True),
        sa.Column("protein", sa.Float(precision=2), nullable=True),
        sa.Column("fats", sa.Float(precision=2), nullable=True),
        sa.Column("carbs", sa.Float(precision=2), nullable=True),
        sa.ForeignKeyConstraint(["school_id"], ["schools.id"], name=op.f("foods_school_id_fkey"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("foods_pkey")),
    )
    op.create_table(
        "issued_tokens",
        sa.Column("value", sa.String(length=512), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("revoked", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("issued_tokens_user_id_fkey"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("value", name=op.f("issued_tokens_pkey")),
    )
    op.create_table(
        "passwords",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.LargeBinary(length=100), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("passwords_user_id_fkey"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name=op.f("passwords_pkey")),
    )
    op.create_table(
        "school_classes",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("school_id", sa.Integer(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("letter", sa.String(length=1), nullable=False),
        sa.Column("has_breakfast", sa.Boolean(), nullable=False),
        sa.Column("has_lunch", sa.Boolean(), nullable=False),
        sa.Column("has_dinner", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["school_id"], ["schools.id"], name=op.f("school_classes_school_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("school_classes_pkey")),
        sa.UniqueConstraint("school_id", "number", "letter", name="unique_classes_in_school"),
    )
    op.create_table(
        "meals",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("class_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("breakfast_price", sa.Float(precision=2, asdecimal=True), nullable=False),
        sa.Column("lunch_price", sa.Float(precision=2, asdecimal=True), nullable=False),
        sa.Column("dinner_price", sa.Float(precision=2, asdecimal=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["class_id"], ["school_classes.id"], name=op.f("meals_class_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("meals_pkey")),
        sa.UniqueConstraint("class_id", "date", name="unique_class_meal_per_day"),
    )
    op.create_table(
        "pupils",
        sa.Column("id", sa.String(length=20), nullable=False),
        sa.Column("class_id", sa.Integer(), nullable=True),
        sa.Column("last_name", sa.String(length=32), nullable=False),
        sa.Column("first_name", sa.String(length=32), nullable=False),
        sa.Column("certificate_before_date", sa.DateTime(), nullable=True),
        sa.Column("balance", sa.Float(precision=2, asdecimal=True), nullable=False),
        sa.Column("breakfast", sa.Boolean(), nullable=False),
        sa.Column("lunch", sa.Boolean(), nullable=False),
        sa.Column("dinner", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["class_id"], ["school_classes.id"], name=op.f("pupils_class_id_fkey"), ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pupils_pkey")),
    )
    op.create_table(
        "teachers",
        sa.Column("class_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["class_id"], ["school_classes.id"], name=op.f("teachers_class_id_fkey"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name=op.f("teachers_user_id_fkey"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("class_id", "user_id", name=op.f("teachers_pkey")),
    )
    op.create_table(
        "cancel_meal_periods",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pupil_id", sa.String(length=20), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=True),
        sa.Column("comment", sa.String(length=512), nullable=True),
        sa.ForeignKeyConstraint(
            ["pupil_id"], ["pupils.id"], name=op.f("cancel_meal_periods_pupil_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("cancel_meal_periods_pkey")),
    )
    op.create_table(
        "meal_requests",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("teacher_id", sa.Integer(), nullable=False),
        sa.Column("meal_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["meal_id"], ["meals.id"], name=op.f("meal_requests_meal_id_fkey")),
        sa.ForeignKeyConstraint(
            ["teacher_id"], ["users.id"], name=op.f("meal_requests_teacher_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("meal_requests_pkey")),
        sa.UniqueConstraint("meal_id", name=op.f("meal_requests_meal_id_key")),
    )
    op.create_table(
        "menu",
        sa.Column("meal_id", sa.Integer(), nullable=False),
        sa.Column("food_id", sa.Integer(), nullable=False),
        sa.Column("meal_type", sa.Enum("BREAKFAST", "LUNCH", "DINNER", name="mealtype"), nullable=False),
        sa.ForeignKeyConstraint(["food_id"], ["foods.id"], name=op.f("menu_food_id_fkey"), ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["meal_id"], ["meals.id"], name=op.f("menu_meal_id_fkey"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("meal_id", "food_id", name=op.f("menu_pkey")),
    )
    op.create_table(
        "parents_pupils",
        sa.Column("pupil_id", sa.String(length=20), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["parent_id"], ["users.id"], name=op.f("parents_pupils_parent_id_fkey"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["pupil_id"], ["pupils.id"], name=op.f("parents_pupils_pupil_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("pupil_id", "parent_id", name=op.f("parents_pupils_pkey")),
    )
    op.create_table(
        "declared_pupils",
        sa.Column("request_id", sa.Integer(), nullable=False),
        sa.Column("pupil_id", sa.String(length=20), nullable=False),
        sa.Column("breakfast", sa.Boolean(), nullable=False),
        sa.Column("lunch", sa.Boolean(), nullable=False),
        sa.Column("dinner", sa.Boolean(), nullable=False),
        sa.Column("preferential", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["pupil_id"], ["pupils.id"], name=op.f("declared_pupils_pupil_id_fkey"), ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["request_id"], ["meal_requests.id"], name=op.f("declared_pupils_request_id_fkey"), ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("request_id", "pupil_id", name=op.f("declared_pupils_pkey")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("declared_pupils")
    op.drop_table("parents_pupils")
    op.drop_table("menu")
    op.drop_table("meal_requests")
    op.drop_table("cancel_meal_periods")
    op.drop_table("teachers")
    op.drop_table("pupils")
    op.drop_table("meals")
    op.drop_table("school_classes")
    op.drop_table("passwords")
    op.drop_table("issued_tokens")
    op.drop_table("foods")
    op.drop_table("users")
    op.drop_table("schools")
    op.execute("DROP TYPE mealtype;")
    op.execute("DROP TYPE role;")
    # ### end Alembic commands ###
